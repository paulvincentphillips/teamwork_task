{"ast":null,"code":"var _jsxFileName = \"/home/paul/teamwork_task/src/containers/users.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport UsersGrid from \"../components/users/index\";\nimport { GridItem } from \"../components/users/styles/users\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UsersContainer = () => {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  const [planets, setPlanets] = useState([]);\n\n  const getUsers = async () => {\n    try {\n      let allUsers = [];\n      let response = await fetch(\"https://swapi.dev/api/people\");\n      let jsonData = await response.json(); //push users to array while there is a next link, push users, repeat...\n\n      while (true) {\n        jsonData.results.map(result => {\n          return allUsers.push(result);\n        });\n\n        if (jsonData.next) {\n          response = await fetch(jsonData.next);\n          jsonData = await response.json();\n        } else {\n          break;\n        }\n      }\n\n      setUsers(allUsers);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  const getPlanets = async () => {\n    try {\n      let allPlanets = [];\n      let response = await fetch(\"https://swapi.dev/api/planets\");\n      let jsonData = await response.json(); //push planets to array while there is a next link, push planets, repeat...\n\n      while (true) {\n        jsonData.results.map(result => {\n          return allPlanets.push(result);\n        });\n\n        if (jsonData.next) {\n          response = await fetch(jsonData.next);\n          jsonData = await response.json();\n        } else {\n          break;\n        }\n      }\n\n      setPlanets(allPlanets);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  useEffect(() => {\n    getUsers();\n    getPlanets();\n  }, []);\n\n  function getPlanetName(url) {\n    const splitUrl = url.split('/');\n    const planetIndex = splitUrl[splitUrl.length - 2];\n    return planets[planetIndex - 1].name;\n  }\n\n  return /*#__PURE__*/_jsxDEV(UsersGrid, {\n    children: [/*#__PURE__*/_jsxDEV(UsersGrid.UserRow, {\n      children: [/*#__PURE__*/_jsxDEV(GridItem, {\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n        children: \"Height\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n        children: \"Mass\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n        children: \"Created\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n        children: \"Edited\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n        children: \"Planet Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), users.map(user => {\n      {\n        console.log(user);\n      }\n      return /*#__PURE__*/_jsxDEV(UsersGrid.UserRow, {\n        children: [/*#__PURE__*/_jsxDEV(GridItem, {\n          children: user.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n          children: user.height\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n          children: user.mass\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n          children: user.created\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n          children: user.edited\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n          children: getPlanetName(user.homeworld)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UsersContainer, \"6U0oHEqvrL8NPoU+GqTicVHFzv8=\");\n\n_c = UsersContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"UsersContainer\");","map":{"version":3,"sources":["/home/paul/teamwork_task/src/containers/users.js"],"names":["React","useState","useEffect","UsersGrid","GridItem","UsersContainer","users","setUsers","planets","setPlanets","getUsers","allUsers","response","fetch","jsonData","json","results","map","result","push","next","error","console","message","getPlanets","allPlanets","getPlanetName","url","splitUrl","split","planetIndex","length","name","user","log","height","mass","created","edited","homeworld"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport UsersGrid from \"../components/users/index\";\nimport { GridItem } from \"../components/users/styles/users\";\n\nexport const UsersContainer = () => {\n  const [users, setUsers] = useState([]);\n  const [planets, setPlanets] = useState([]);\n\n  const getUsers = async () => {\n    try {\n      let allUsers = [];\n      let response = await fetch(\"https://swapi.dev/api/people\");\n      let jsonData = await response.json();\n\n      //push users to array while there is a next link, push users, repeat...\n      while (true) {\n        jsonData.results.map((result) => {\n          return allUsers.push(result);\n        });\n        if (jsonData.next) {\n          response = await fetch(jsonData.next);\n          jsonData = await response.json();\n        } else {\n          break;\n        }\n      }\n\n      setUsers(allUsers);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  const getPlanets = async () => {\n    try {\n      let allPlanets = [];\n      let response = await fetch(\"https://swapi.dev/api/planets\");\n      let jsonData = await response.json();\n\n      //push planets to array while there is a next link, push planets, repeat...\n      while (true) {\n        jsonData.results.map((result) => {\n          return allPlanets.push(result);\n        });\n        if (jsonData.next) {\n          response = await fetch(jsonData.next);\n          jsonData = await response.json();\n        } else {\n          break;\n        }\n      }\n\n      setPlanets(allPlanets);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  useEffect(() => {\n    getUsers();\n    getPlanets();\n  }, []);\n\n  function getPlanetName(url){\n    const splitUrl = url.split('/');\n    const planetIndex = splitUrl[splitUrl.length -2];\n    return planets[planetIndex -1].name;\n}\n\n  return (\n    <UsersGrid>\n      <UsersGrid.UserRow>\n        <GridItem>Name</GridItem>\n        <GridItem>Height</GridItem>\n        <GridItem>Mass</GridItem>\n        <GridItem>Created</GridItem>\n        <GridItem>Edited</GridItem>\n        <GridItem>Planet Name</GridItem>\n      </UsersGrid.UserRow>\n      {users.map((user) => {\n        {console.log(user)}\n        return (\n          <UsersGrid.UserRow>\n            <GridItem>{user.name}</GridItem>\n            <GridItem>{user.height}</GridItem>\n            <GridItem>{user.mass}</GridItem>\n            <GridItem>{user.created}</GridItem>\n            <GridItem>{user.edited}</GridItem>\n            <GridItem>{getPlanetName(user.homeworld)}</GridItem>\n          </UsersGrid.UserRow>\n        );\n      })}\n    </UsersGrid>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}