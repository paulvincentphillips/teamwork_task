{"ast":null,"code":"var _jsxFileName = \"/home/paul/teamwork_task/src/containers/users.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport UsersGrid from \"../components/users/index\";\nimport { GridItem } from \"../components/users/styles/users\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UsersContainer = () => {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  const [planets, setPlanets] = useState([]);\n\n  const getUsers = async () => {\n    try {\n      let allUsers = [];\n      let response = await fetch(\"https://swapi.dev/api/people\");\n      let jsonData = await response.json(); //push users to array while there is a next link, push users, repeat...\n\n      while (true) {\n        jsonData.results.map(result => {\n          return allUsers.push(result);\n        });\n\n        if (jsonData.next) {\n          response = await fetch(jsonData.next);\n          jsonData = await response.json();\n        } else {\n          break;\n        }\n      }\n\n      console.log(allUsers);\n      setUsers(allUsers);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  const getPlanets = async () => {\n    try {\n      let allPlanets = [];\n      let response = await fetch(\"https://swapi.dev/api/planets\");\n      let jsonData = await response.json(); //push planets to array while there is a next link, push planets, repeat...\n\n      while (true) {\n        jsonData.results.map(result => {\n          return allPlanets.push(result);\n        });\n\n        if (jsonData.next) {\n          response = await fetch(jsonData.next);\n          jsonData = await response.json();\n        } else {\n          break;\n        }\n      }\n\n      console.log(allPlanets);\n      setPlanets(allPlanets);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  useEffect(() => {\n    getUsers();\n    getPlanets();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UsersGrid, {\n    children: [/*#__PURE__*/_jsxDEV(UsersGrid.UserRow, {\n      children: [/*#__PURE__*/_jsxDEV(GridItem, {\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n        children: \"Height\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n        children: \"Mass\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n        children: \"Created\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n        children: \"Edited\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n        children: \"Planet Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), users.map(user => {\n      return /*#__PURE__*/_jsxDEV(UsersGrid.UserRow, {\n        children: [/*#__PURE__*/_jsxDEV(GridItem, {\n          children: user.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n          children: user.height\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n          children: \"Mass\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n          children: \"Created\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n          children: \"Edited\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n          children: \"Planet Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UsersContainer, \"6U0oHEqvrL8NPoU+GqTicVHFzv8=\");\n\n_c = UsersContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"UsersContainer\");","map":{"version":3,"sources":["/home/paul/teamwork_task/src/containers/users.js"],"names":["React","useState","useEffect","UsersGrid","GridItem","UsersContainer","users","setUsers","planets","setPlanets","getUsers","allUsers","response","fetch","jsonData","json","results","map","result","push","next","console","log","error","message","getPlanets","allPlanets","user","name","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport UsersGrid from \"../components/users/index\";\nimport { GridItem } from \"../components/users/styles/users\";\n\nexport const UsersContainer = () => {\n  const [users, setUsers] = useState([]);\n  const [planets, setPlanets] = useState([]);\n\n  const getUsers = async () => {\n    try {\n      let allUsers = [];\n      let response = await fetch(\"https://swapi.dev/api/people\");\n      let jsonData = await response.json();\n\n      //push users to array while there is a next link, push users, repeat...\n      while (true) {\n        jsonData.results.map((result) => {\n          return allUsers.push(result);\n        });\n        if (jsonData.next) {\n          response = await fetch(jsonData.next);\n          jsonData = await response.json();\n        } else {\n          break;\n        }\n      }\n\n      console.log(allUsers);\n      setUsers(allUsers);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  const getPlanets = async () => {\n    try {\n      let allPlanets = [];\n      let response = await fetch(\"https://swapi.dev/api/planets\");\n      let jsonData = await response.json();\n\n      //push planets to array while there is a next link, push planets, repeat...\n      while (true) {\n        jsonData.results.map((result) => {\n          return allPlanets.push(result);\n        });\n        if (jsonData.next) {\n          response = await fetch(jsonData.next);\n          jsonData = await response.json();\n        } else {\n          break;\n        }\n      }\n\n      console.log(allPlanets);\n      setPlanets(allPlanets);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  useEffect(() => {\n    getUsers();\n    getPlanets();\n  }, []);\n\n  return (\n    <UsersGrid>\n      <UsersGrid.UserRow>\n        <GridItem>Name</GridItem>\n        <GridItem>Height</GridItem>\n        <GridItem>Mass</GridItem>\n        <GridItem>Created</GridItem>\n        <GridItem>Edited</GridItem>\n        <GridItem>Planet Name</GridItem>\n      </UsersGrid.UserRow>\n      {users.map((user) => {\n        return (\n          <UsersGrid.UserRow>\n            <GridItem>{user.name}</GridItem>\n            <GridItem>{user.height}</GridItem>\n            <GridItem>Mass</GridItem>\n            <GridItem>Created</GridItem>\n            <GridItem>Edited</GridItem>\n            <GridItem>Planet Name</GridItem>\n          </UsersGrid.UserRow>\n        );\n      })}\n    </UsersGrid>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}